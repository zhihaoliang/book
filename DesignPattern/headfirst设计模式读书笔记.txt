内聚：它用来度量一个类或者模块紧密地达到单一目的的责任，当一个模块或者一个类被设计支持一组相关的功能时，我说它具有高内聚，反之被设计成支持一组不相关的功能时，我们说它具有低内聚

1.设计原则
1>把程序中需要变化的地方独立封装起来，和不变分开。
2>针对接口编程，而不针对现实编程
3>多用组合少用继承 has-a 比is-a更灵活
4>类对扩展开放，对修改关闭
5>要依赖抽象，不要依赖具体的类
6>一个类应该只有一个引起变化的原则

2.策略模式：
定义算法族，分别封装起来，可以相互替换，此模式让算法变化独立于使用算法的客户。

3.观察者模式：
定义了一系列对象之间一对多的关系。当一个对象改变状态，其他依赖者都会收到通知
设计原则：为了交互对象之间的松耦合设计而努力

4.装饰模式
动态的将责任附加对象上。若要扩展功能，装饰者提供比继承更有弹性。

5.工厂方法模式
定义了一个创建对象的接口，由子类决定要实例化的类是那一个，工厂方法让类的实例化推迟到子类
依赖倒致的原则：
1.变量不可以持有具体类的引用
2.不要让类派生自具体类
3.不要覆盖基类中已实现发方法

6.命令模式
将“请求”封装成对象，以便使用不同的请求、队列或者日志参数化其他对象。命令模式支持撤销的操作。
实现调用者和请求接受者之间的解耦

7.适配器模式
将一个类的接口，转换成客户期望的另一个接口。适配器让原本不兼容的类合作无间
让客户与实现之间解耦
包扣类适配器和对象适配器
类适配器在多继承中出现

8.模板方法模式
在一个方法中定义一个算法骨架，而是将一些步骤延迟到子类中，模板方法使子类可以在不改变算法结构的情况下，重新定义算法某些步骤
好莱坞原则：别调用我们，我们调用你。高层调用底层的实现。

9、迭代模式
提供一种方法顺序访问一个聚合对象中的各个元素，而不是暴露其内部的表示。

10.组合模式
允许你将对象组合成树形结构，来表现“整体部分”层次机构，组合能用户以一致的方式处理个别对象及对象组合